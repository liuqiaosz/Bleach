package pixel.ui.control
{
	import flash.display.Graphics;
	import flash.events.MouseEvent;
	
	import pixel.ui.control.style.IVisualStyle;
	import pixel.ui.control.style.UIRadioStyle;

	public class UIRadio extends UIControl
	{
		private var _isFocus:Boolean = false;
		private var _selected:Boolean = false;
		
		public function set selected(value:Boolean):void
		{
			_selected = value;
		}
		public function get selected():Boolean
		{
			return _selected;
		}
		private var _inlineSize:int = 2;
		public function set inlineSize(value:int):void
		{
			_inlineSize = value;
		}
		public function get inlineSize():int
		{
			return _inlineSize;
		}
		private var _frameSize:int = 6;
		public function set frameSize(value:int):void
		{
			_frameSize = value;
			width = height = value;
		}
		public function get frameSize():int
		{
			return _frameSize;
		}
			
		public function UIRadio(skin:Class = null)
		{
			super(skin ? skin : UIRadioStyle);
			this.addEventListener(MouseEvent.MOUSE_MOVE,onRadioFocus);
			this.addEventListener(MouseEvent.MOUSE_DOWN,onRadioPressed);
			this.addEventListener(MouseEvent.MOUSE_OUT,onRadioFocusOut);
			this.width = this.height = _frameSize;
			
		}
		
		override public function dispose():void
		{
			this.removeEventListener(MouseEvent.MOUSE_MOVE,onRadioFocus);
			this.removeEventListener(MouseEvent.MOUSE_DOWN,onRadioPressed);
			this.removeEventListener(MouseEvent.MOUSE_OUT,onRadioFocusOut);
		}
		
		override public function EnableEditMode():void
		{
			this.removeEventListener(MouseEvent.MOUSE_MOVE,onRadioFocus);
			this.removeEventListener(MouseEvent.MOUSE_DOWN,onRadioPressed);
			this.removeEventListener(MouseEvent.MOUSE_OUT,onRadioFocusOut);
			_selected = true;
			super.EnableEditMode();
		}
		
		protected function onRadioPressed(event:MouseEvent):void
		{
			_selected = true;
			Update();
		}
		
		protected function onRadioFocusOut(event:MouseEvent):void
		{
			_isFocus = false;
			Update();
		}
		protected function onRadioFocus(event:MouseEvent):void
		{
			_isFocus = true;
			Update();
		}
		
		override protected function StyleRender(Style:IVisualStyle):void
		{
			var style:UIRadioStyle = Style as UIRadioStyle;
			var pen:Graphics = this.graphics;
			pen.clear();
			//绘制外框
			pen.lineStyle(style.BorderThinkness,style.BorderColor,style.BorderAlpha);
			if(_isFocus)
			{
				pen.beginFill(style.focusColor,style.focusAlpha);
			}
			else
			{
				pen.beginFill(0xffffff);
			}
			pen.drawCircle(_frameSize,_frameSize,_frameSize);
			pen.endFill();
			
			//绘制内框
			if(_selected)
			{
				//屏蔽内框线条
				pen.lineStyle(0);
				pen.beginFill(style.selectColor);
				pen.drawCircle(_frameSize,_frameSize,_inlineSize);
				pen.endFill();
			}
		}
	}
}