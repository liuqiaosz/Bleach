package corecom.control
{
	
	import corecom.control.style.ContainerStyle;
	import corecom.control.utility.Utils;
	
	import flash.display.DisplayObject;
	import flash.display.Sprite;
	import flash.events.EventPhase;
	import flash.events.MouseEvent;
	import flash.geom.Point;
	import flash.utils.ByteArray;
	
	import utility.Tools;
	
	/**
	 * 基础容器类,不提供视觉渲染
	 * 
	 * 定义子组件布局
	 * 定义子组件管理
	 * 响应子组件的更新
	 * 
	 **/
	public class Container extends UIControl implements IContainer
	{
		protected var _Padding:int = 0
		
		//布局样式,默认为绝对布局
		//private var _Layout:uint = LayoutConstant.ABSOLUTE;
		//子对象队列
		private var _Children:Array = [];
		public function Container(Skin:Class = null)
		{
			var SkinStyle:Class = Skin ? Skin: ContainerStyle;
			super(SkinStyle);
			_Content = new Sprite();
			_Content.x = _Content.y = _Padding;
			//_Content.width = _Content.width - _Content.x;
			//_Content.height = _Content.height - _Content.y;
			super.addChild(_Content);
		}
		
		public function get Gap():int
		{
			return ContainerStyle(Style).Gap;
		}
		public function set Gap(Value:int):void
		{
			ContainerStyle(Style).Gap = Value;
			UpdateLayout();
		}
		
		public function set Padding(Value:int):void
		{
			_Padding = Value;
			_Content.x = _Content.y = _Padding;
		}
		
		/**
		 * 变更当前布局
		 **/
		public function set Layout(Value:uint):void
		{
			//判断是否与当前布局不一致
			if(ContainerStyle(Style).Layout != Value)
			{
				ContainerStyle(Style).Layout = Value;
				UpdateLayout();
			}
		}
		public function get Layout():uint
		{
			return ContainerStyle(Style).Layout;
		}
		
		public function IsChildren(Obj:Object):Boolean
		{
			if(_Children.indexOf(Obj) < 0)
			{
				return false;
			}
			return true;
		}
		
		/**
		 * 复写Sprite addChild函数.将添加的Child作为子组件保存并且进行布局调整
		 **/
		override public function addChild(Child:DisplayObject):DisplayObject
		{
			Append(Child);
			//return super.addChild(Child);
			
			return _Content.addChild(Child);
		}
		override public function removeChild(child:DisplayObject):DisplayObject
		{
			Remove(child);
			//return super.removeChild(child);
			return _Content.removeChild(child);
		}
		
		public function OrignalAddChild(Child:DisplayObject):DisplayObject
		{
			_Children.push(Child);
			
			return super.addChild(Child);
		}
		
		/**
		 * 复写Sprite addChildAt函数.将添加的Child作为子组件保存并且进行布局调整
		 **/
		override public function addChildAt(Child:DisplayObject, Index:int):DisplayObject
		{
			Append(Child);
			//return super.addChildAt(Child,Index);
			return _Content.addChildAt(Child,Index);
		}
		
		/**
		 * 更新布局,对所以子对象重新进行排序
		 **/
		protected function UpdateLayout():void
		{
			var Idx:int = 0;
			var Len:int = _Children ? _Children.length:0;
			var Seek:int = 0;
			switch(Layout)
			{
				case LayoutConstant.HORIZONTAL:
					for(Idx=0; Idx<Len; Idx++)
					{
						_Children[Idx].x = Seek;
						_Children[Idx].y = 0;
						Seek = (_Children[Idx].x + _Children[Idx].width + Gap);
					}
					break;
				case LayoutConstant.VERTICAL:
					for(Idx=0; Idx<Len; Idx++)
					{
						_Children[Idx].x = 0;
						_Children[Idx].y = Seek;
						Seek += (_Children[Idx].y + _Children[Idx].height + Gap);
					}
					break;
				case LayoutConstant.GRID:
					var SeekY:int = 0;
					for(Idx=0; Idx<Len; Idx++)
					{
						if(Seek > width)
						{
							Seek = 0;
							SeekY += (_Children[Idx - 1].height + Gap);
						}
						_Children[Idx].x = Seek;
						_Children[Idx].y = SeekY;
						//Seek += (_Children[Idx].y + _Children[Idx].height + Gap);
						Seek += (_Children[Idx].x + _Children[Idx].width + Gap);
					}
					break;
				default:
					break;
			}
		}
		
		private var _Content:Sprite = null;
		public function get Content():Sprite
		{
			return _Content;
		}
		
		public function get Children():Array
		{
			return _Children;
		}
		
		private function Remove(Child:DisplayObject):void
		{
			if(_Children.indexOf(Child) >= 0)
			{
				_Children.splice(_Children.indexOf(Child),1);
				UpdateLayout();
			}
		}
		
		/**
		 * 将子组件添加至管理队列.同时根据当前的布局状态进行布局调整
		 **/
		private function Append(Child:DisplayObject):void
		{
			if(!_Children)
			{
				_Children = [];
			}
			var Last:DisplayObject = _Children.length > 0 ? _Children[_Children.length - 1]:null;
			_Children.push(Child);
			
			switch(Layout)
			{
				case LayoutConstant.HORIZONTAL:
					if(Last)
					{
						Child.x = Last.x + Last.width + Gap;
						Child.y = Last.y;
					}
					else
					{
						Child.x = 0;
						Child.y = 0;
					}
					break;
				case LayoutConstant.VERTICAL:
					if(Last)
					{
						Child.x = Last.x;
						Child.y = Last.y + Last.height + Gap;
					}
					else
					{
						Child.x = 0;
						Child.y = 0;
					}
					break;
				case LayoutConstant.GRID:
					if(Last)
					{
						if((Last.x + Last.width + Child.width + Gap) >= width)
						{
							Child.x = 0;
							Child.y = Last.y + Last.height + Gap;
						}
						else
						{
							Child.x = (Last.x + Last.width + Gap);
							Child.y = Last.y;
						}
					}
					else
					{
						Child.x = 0;
						Child.y = 0;
					}
					break;
				default:
//					Child.x = 0;
//					Child.y = 0;
					break;
			}
		}
		
		public function GetChildById(Id:String):IUIControl
		{
			for each(var Item:IUIControl in _Children)
			{
				if(Item.Id == Id)
				{
					return Item;
				}
			}
			return null;
		}
		
		/**
		 * 获取真实高度
		 * 
		 * 在有子对象的情况下计算所有子项的高度合+Gap
		 * 
		 **/
		override public function get RealHeight():Number
		{
			if(_Children && _Children.length > 0)
			{
				var child:UIControl = null;
				var size:int = 0;
				for each(child in  _Children)
				{
					size += child.height;
				}
				size += (_Children.length) * Gap;
				return size;
			}
			else
			{
				return super.RealHeight;
			}
		}
		
		override public function get RealWidth():Number
		{
			if(_Children && _Children.length > 0)
			{
				var child:UIControl = null;
				var size:int = 0;
				for each(child in  _Children)
				{
					size += child.width;
				}
				size += (_Children.length) * Gap;
				return size;
			}
			else
			{
				return super.RealWidth;
			}
		}
		
		public function OnDrop(Control:UIControl):void
		{
			addChild(Control);
		}
		
		override protected function SpecialEncode(Data:ByteArray):void
		{
			var ChildLen:int = Children.length;
			
			Data.writeByte(ChildLen);
			var Child:IUIControl = null;
			var ChildData:ByteArray = null;
			for(var Idx:int=0; Idx<ChildLen; Idx++)
			{
				Child = Children[Idx];
				//Data.writeByte(Utils.GetControlPrototype(Child));
				ChildData = Child.Encode();
				Data.writeBytes(ChildData,0,ChildData.length);
			}
		}
		
		override protected function SpecialDecode(Data:ByteArray):void
		{
			var ChildLen:int = Data.readByte();
			var Child:UIControl = null;
			var ChildData:ByteArray = null;
			var Prototype:Class = null;
			var Type:uint = 0;
			for(var Idx:int=0; Idx<ChildLen; Idx++)
			{
				Type = Data.readByte();
				Prototype = Utils.GetPrototypeByType(Type);
				Child = new Prototype() as UIControl;
				Child.Decode(Data);
				addChild(Child);
			}
		}
	}
}